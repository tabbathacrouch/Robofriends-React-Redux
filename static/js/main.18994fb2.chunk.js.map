{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","actions.js","components/Header.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","height","width","CardList","robots","map","user","i","Scroll","props","style","position","top","zIndex","padding","background","children","SearchBox","SearchChange","type","placeholder","onChange","CHANGE_SEARCH_FIELD","FETCH_PRODUCTS_PENDING","FETCH_PRODUCTS_SUCCESS","FETCH_PRODUCTS_ERROR","Header","App","store","useState","searchResults","setSearchResults","text","useSelector","state","searchRobots","searchField","robotUsers","requestRobots","dispatch","useDispatch","useEffect","fetch","then","response","json","data","payload","catch","error","filteredRobots","filter","toLowerCase","includes","newRobot","event","setSearchField","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","robotInitialState","pending","logger","createLogger","rootReducer","combineReducers","action","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.18994fb2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img\n        alt=\"\"\n        src={`https://robohash.org/${id}?size=200x200`}\n        height=\"200px\"\n        width=\"200px\"\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            name={robots[i].name}\n            email={robots[i].email}\n            id={robots[i].id}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        position: \"sticky\",\n        top: \"0\",\n        zIndex: \"5\",\n        padding: \"10px\",\n        background:\n          \"linear-gradient(to left, rgba(7,27,82,1) 0%, rgba(0,128,128,1) 100%)\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React from \"react\";\n\nconst SearchBox = ({ SearchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue w-30\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={SearchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\nexport const FETCH_PRODUCTS_PENDING = \"FETCH_PRODUCTS_PENDING\";\nexport const FETCH_PRODUCTS_SUCCESS = \"FETCH_PRODUCTS_SUCCESS\";\nexport const FETCH_PRODUCTS_ERROR = \"FETCH_PRODUCTS_ERROR\";\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text,\n  };\n};\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: FETCH_PRODUCTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((data) => dispatch({ type: FETCH_PRODUCTS_SUCCESS, payload: data }))\n    .catch((error) => dispatch({ type: FETCH_PRODUCTS_ERROR, payload: error }));\n};\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div>\n      <h1 className=\"f2\">RoboFriends</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\nimport Scroll from \"../components/Scroll\";\nimport SearchBox from \"../components/SearchBox\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setSearchField, requestRobots } from \"../actions\";\nimport \"../style/App.css\";\nimport Header from \"../components/Header\";\n\nconst App = ({ store }) => {\n  const [searchResults, setSearchResults] = useState([]);\n\n  const text = useSelector((state) => state.searchRobots.searchField);\n\n  const robotUsers = useSelector((state) => state.requestRobots.robots);\n\n  const dispatch = useDispatch();\n\n  const onSearchChange = (event) => {\n    dispatch(setSearchField(event.target.value));\n  };\n\n  useEffect(() => {\n    dispatch(requestRobots());\n  }, [dispatch]);\n\n  useEffect(() => {\n    let filteredRobots = robotUsers.filter((robots) => {\n      return robots.name.toLowerCase().includes(text.toLowerCase());\n    });\n    setSearchResults(filteredRobots);\n  }, [text, robotUsers]);\n\n  const newRobot = searchResults;\n\n  return (\n    <div className=\"tc\">\n      <Scroll>\n        <Header />\n        <SearchBox SearchChange={onSearchChange} />\n      </Scroll>\n      {text === \"\" ? (\n        <CardList robots={robotUsers} />\n      ) : (\n        <CardList robots={newRobot} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  FETCH_PRODUCTS_PENDING,\n  FETCH_PRODUCTS_SUCCESS,\n  FETCH_PRODUCTS_ERROR,\n} from \"./actions\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case CHANGE_SEARCH_FIELD:\n      return { ...state, searchField: payload };\n    default:\n      return state;\n  }\n};\n\nconst robotInitialState = {\n  pending: false,\n  robots: [],\n  error: null,\n};\n\nexport const requestRobots = (state = robotInitialState, action) => {\n  switch (action.type) {\n    case FETCH_PRODUCTS_PENDING:\n      return {\n        ...state,\n        pending: true,\n      };\n    case FETCH_PRODUCTS_SUCCESS:\n      return {\n        ...state,\n        pending: false,\n        robots: action.payload,\n      };\n    case FETCH_PRODUCTS_ERROR:\n      return {\n        ...state,\n        pending: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport thunkMiddleWare from \"redux-thunk\";\nimport { createLogger } from \"redux-logger\";\nimport App from \"./containers/App\";\nimport \"./style/index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleWare, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}